# 旅游日记平台微信小程序设计文档

## 一、项目概述

### 1.1 项目名称
旅游日记平台微信小程序

### 1.2 项目背景
“旅游日记平台”是一个面向C端用户的社交分享平台，旨在让用户记录和分享旅行经历，浏览他人的游记，并通过审核机制确保内容质量。微信小程序端作为移动端的主要入口，需提供良好的用户体验，支持用户注册登录、游记创建与管理、浏览与搜索，以及管理员和审核员的后台管理功能。

### 1.3 设计目标
- 实现用户友好的界面，符合微信小程序的交互规范。
- 支持核心功能：用户注册/登录、游记创建/编辑/删除、游记浏览/搜索、审核管理。
- 确保高性能和稳定性，优化小程序加载速度和响应时间。
- 与后端接口无缝对接，处理多媒体上传和数据分页加载。
- 遵循项目评分标准，注重用户体验（UI/UX）和代码质量。

## 二、功能模块

根据项目要求和 OpenAPI 文档，微信小程序端的功能模块分为以下几部分：

### 2.1 用户模块
- **注册**：用户通过用户名、密码、昵称和可选头像进行注册。
- **登录**：支持用户名和密码登录，返回 JWT Token 用于后续请求认证。
- **个人资料**：查看和更新用户昵称、头像，展示用户角色（普通用户、审核员、管理员）。
- **我的游记**：查看自己创建的游记列表，支持按状态（待审核、已通过、已拒绝）过滤。

### 2.2 游记模块
- **游记列表**：展示已通过审核的游记，支持分页加载、关键词搜索和按地理位置筛选。
- **游记详情**：查看游记的标题、内容、图片、视频和位置信息。
- **创建游记**：用户可上传标题、内容、图片（必填）、视频（可选）和位置信息。
- **编辑游记**：支持编辑未审核通过的游记。
- **删除游记**：用户可删除自己创建的游记。

### 2.3 审核模块
- **待审核游记列表**：审核员和管理员可查看待审核的游记列表，支持分页。
- **审核操作**：审核员可通过或拒绝游记（需提供拒绝原因）；管理员额外支持删除游记。

### 2.4 管理员模块
- **审核员管理**：管理员可查看审核员列表、添加或移除审核员。
- **游记管理**：管理员可执行所有审核操作（通过、拒绝、删除）。

## 三、页面设计

以下为微信小程序的主要页面设计，参考项目文档中的 UI 建议（如游记列表卡片布局）和微信小程序的交互规范。

### 3.1 页面结构
小程序采用 TabBar 导航，包含以下主页面：
1. **首页**：展示热门游记列表，支持搜索和筛选。
2. **我的游记**：展示用户创建的游记，支持新增和状态过滤。
3. **审核管理**（仅审核员和管理员可见）：展示待审核游记列表和审核操作。
4. **个人中心**：展示用户资料、角色信息和设置。

### 3.2 页面详情

#### 3.2.1 首页
- **功能**：
  - 展示热门游记列表（卡片式布局，包含标题、图片、位置、点赞数等）。
  - 支持关键词搜索（调用 `/api/diaries` 的 `keyword` 参数）。
  - 支持按地理位置筛选（调用 `/api/diaries` 的 `lat`、`lng`、`distance` 参数）。
  - 分页加载（通过 `page` 和 `limit` 参数实现）。
- **UI 元素**：
  - 顶部搜索栏。
  - 筛选按钮（弹出位置筛选弹窗）。
  - 游记卡片（参考项目文档中的卡片布局）。
  - 底部“加载更多”按钮或自动加载。
- **交互**：
  - 点击卡片跳转至游记详情页。
  - 搜索触发实时查询，显示结果。
  - 位置筛选结合微信小程序的 `wx.getLocation` 获取用户位置。

#### 3.2.2 我的游记
- **功能**：
  - 展示用户创建的游记列表（支持 `pending`、`approved`、`rejected` 状态过滤）。
  - 新增游记按钮。
  - 编辑或删除未审核通过的游记。
- **UI 元素**：
  - 状态筛选下拉菜单。
  - 新增游记按钮（浮动或顶部按钮）。
  - 游记列表（卡片或列表形式）。
- **交互**：
  - 点击游记跳转至详情页（可编辑状态下显示编辑按钮）。
  - 长按游记弹出删除确认弹窗。
  - 新增游记跳转至游记编辑页。

#### 3.2.3 游记详情
- **功能**：
  - 展示游记的标题、内容、图片、视频、位置信息和创建者信息。
  - 支持未审核通过的游记编辑（仅限创建者）。
- **UI 元素**：
  - 顶部标题和创建者信息。
  - 图片轮播组件（支持多张图片）。
  - 视频播放组件（若有视频）。
  - 内容文本展示区域。
  - 位置信息（可点击查看地图）。
  - 编辑/删除按钮（仅限创建者且未审核通过）。
- **交互**：
  - 图片支持点击放大预览。
  - 视频支持播放/暂停。
  - 位置信息调用 `wx.openLocation` 显示地图。
  - 编辑跳转至游记编辑页。

#### 3.2.4 游记编辑
- **功能**：
  - 创建或编辑游记，包含标题、内容、图片、视频和位置信息。
  - 支持多媒体上传（图片必填，视频可选）。
- **UI 元素**：
  - 标题输入框。
  - 内容富文本编辑器（或多行文本框）。
  - 图片上传组件（支持多张图片预览和删除）。
  - 视频上传组件（支持预览）。
  - 位置选择组件（结合 `wx.chooseLocation`）。
  - 提交按钮。
- **交互**：
  - 图片上传调用 `wx.chooseImage`，支持预览和删除。
  - 视频上传调用 `wx.chooseVideo`。
  - 位置选择调用 `wx.chooseLocation`，返回经纬度和名称。
  - 提交时校验必填字段，调用 `/api/diaries` 或 `/api/diaries/{id}`。

#### 3.2.5 审核管理
- **功能**：
  - 展示待审核游记列表（调用 `/api/admin/diaries/pending`）。
  - 支持通过（`/api/admin/diaries/{id}/approve`）、拒绝（`/api/admin/diaries/{id}/reject`）和删除（`/api/admin/diaries/{id}`，仅管理员）。
- **UI 元素**：
  - 游记列表（卡片或列表形式，显示标题、创建者和状态）。
  - 搜索栏（支持关键词筛选）。
  - 每条游记的操作按钮（通过、拒绝、删除）。
  - 拒绝原因输入框（拒绝时弹出）。
- **交互**：
  - 点击游记跳转至详情页（只读模式）。
  - 点击通过/拒绝触发对应接口调用。
  - 拒绝时弹出输入框，提交拒绝原因。
  - 删除（管理员专属）弹出确认弹窗。

#### 3.2.6 审核员管理（管理员专属）
- **功能**：
  - 查看审核员列表（`/api/admin/reviewers`）。
  - 添加审核员（`/api/admin/reviewers` POST）。
  - 移除审核员（`/api/admin/reviewers` DELETE）。
- **UI 元素**：
  - 审核员列表（显示用户名、昵称）。
  - 添加审核员按钮（弹出用户ID输入框）。
  - 移除按钮（每条记录右侧）。
- **交互**：
  - 添加审核员输入用户ID，提交后刷新列表。
  - 移除审核员弹出确认弹窗，提交后刷新列表。

#### 3.2.7 个人中心
- **功能**：
  - 展示用户资料（用户名、昵称、头像、角色）。
  - 更新昵称（`/api/users/nickname`）。
  - 更新头像（`/api/users/avatar`）。
  - 退出登录。
- **UI 元素**：
  - 头像展示（支持点击上传新头像）。
  - 昵称显示（支持点击编辑）。
  - 角色标签（普通用户、审核员、管理员）。
  - 退出登录按钮。
- **交互**：
  - 点击头像调用 `wx.chooseImage` 上传新头像。
  - 编辑昵称弹出输入框，提交后更新。
  - 退出登录清空本地存储，跳转至登录页。

### 3.3 页面导航
- **TabBar**：
  - 首页（icon: home）
  - 我的游记（icon: book）
  - 审核管理（icon: audit，动态显示）
  - 个人中心（icon: user）
- **动态显示**：
  - 审核管理 Tab 仅对审核员和管理员可见（根据 `/api/users/profile` 返回的 `role` 判断）。

## 四、接口对接

根据 `traveldairy.openapi.json`，以下为小程序端需要调用的主要接口及其实现方式。

### 4.1 用户相关接口
- **注册**：`POST /api/users/register`
  - 参数：`username`, `password`, `nickname`, `avatar`（multipart/form-data）
  - 实现：使用 `wx.uploadFile` 上传头像，处理返回的 `token` 和用户信息。
- **登录**：`POST /api/users/login`
  - 参数：`username`, `password`（application/json）
  - 实现：使用 `wx.request` 发送登录请求，存储 `token` 至 `wx.setStorageSync`。
- **获取个人资料**：`GET /api/users/profile`
  - 实现：携带 `token` 在 header 中，获取用户信息并更新页面。
- **更新头像**：`PUT /api/users/avatar`
  - 参数：`avatar`（multipart/form-data）
  - 实现：使用 `wx.uploadFile` 上传新头像。
- **更新昵称**：`PUT /api/users/nickname`
  - 参数：`nickname`（application/json）
  - 实现：使用 `wx.request` 更新昵称。

### 4.2 游记相关接口
- **获取已批准游记列表**：`GET /api/diaries`
  - 参数：`page`, `limit`, `keyword`, `lat`, `lng`, `distance`
  - 实现：支持分页加载，结合 `wx.getLocation` 获取用户位置。
- **创建游记**：`POST /api/diaries`
  - 参数：`title`, `content`, `images`, `video`, `location`（multipart/form-data）
  - 实现：使用 `wx.uploadFile` 上传图片和视频，`location` 格式化为 GeoJSON。
- **获取游记详情**：`GET /api/diaries/{id}`
  - 实现：展示详情页内容，处理图片和视频渲染。
- **更新游记**：`PUT /api/diaries/{id}`
  - 参数：同创建游记
  - 实现：仅限未审核通过的游记，复用创建逻辑。
- **删除游记**：`DELETE /api/diaries/{id}`
  - 实现：弹出确认弹窗后调用接口。
- **获取我的游记**：`GET /api/diaries/user/me`
  - 参数：`page`, `limit`, `status`
  - 实现：支持状态过滤，分页加载。

### 4.3 审核相关接口
- **获取待审核游记列表**：`GET /api/admin/diaries/pending`
  - 参数：`page`, `limit`
  - 实现：分页加载，展示待审核游记。
- **审核通过**：`PUT /api/admin/diaries/{id}/approve`
  - 实现：点击通过按钮直接调用。
- **拒绝游记**：`PUT /api/admin/diaries/{id}/reject`
  - 参数：`rejectReason`（application/json）
  - 实现：弹出拒绝原因输入框，提交后调用。
- **删除游记（管理员）**：`DELETE /api/admin/diaries/{id}`
  - 实现：弹出确认弹窗后调用。

### 4.4 管理员相关接口
- **获取审核员列表**：`GET /api/admin/reviewers`
  - 实现：展示审核员列表。
- **添加审核员**：`POST /api/admin/reviewers`
  - 参数：`userId`（application/json）
  - 实现：输入用户ID后提交。
- **移除审核员**：`DELETE /api/admin/reviewers`
  - 参数：`userId`（application/json）
  - 实现：点击移除按钮，提交后刷新列表。

### 4.5 接口调用注意事项
- **认证**：所有需要授权的接口需在 header 中携带 `Authorization: Bearer {token}`。
- **错误处理**：处理 401（未授权）、403（无权限）、404（资源未找到）等状态码，提示用户重新登录或显示错误信息。
- **多媒体上传**：使用 `wx.uploadFile` 上传图片和视频，确保文件大小符合后端限制。
- **分页**：通过 `page` 和 `limit` 参数实现列表分页，监听页面滚动触发加载更多。
- **位置处理**：将 `wx.chooseLocation` 返回的经纬度格式化为 GeoJSON 格式（如 `{"type":"Point","coordinates":[lng,lat],"name":"位置名称"}`）。

## 五、技术选型

### 5.1 开发框架
- **微信小程序原生开发**：使用 WXML、WXSS 和 JavaScript 进行开发，确保兼容性和性能。
- **WXS**：用于处理复杂的数据逻辑（如列表过滤）。
- **微信小程序组件**：使用内置组件（如 `swiper`、`video`、`map`）实现图片轮播、视频播放和位置展示。

### 5.2 状态管理
- **全局状态管理**：使用 `globalData` 或自定义 `Store` 管理用户登录状态、`token` 和角色信息。
- **页面状态**：通过 `setData` 管理页面级状态，减少不必要的重渲染。

### 5.3 网络请求
- **wx.request**：处理 JSON 数据请求。
- **wx.uploadFile**：处理图片和视频上传。
- **请求封装**：封装通用的请求函数，统一处理 `token`、错误提示和加载状态。

### 5.4 UI 框架
- **Vant Weapp**：轻量级 UI 组件库，用于快速构建搜索栏、按钮、弹窗等组件。
- **自定义组件**：开发游记卡片、图片上传组件等，优化复用性。
- **Tailwind CSS**（可选）：通过 `wxa-plugin-tailwindcss` 引入 Tailwind 样式，提升开发效率。

### 5.5 其他工具
- **微信开发者工具**：用于调试和预览。
- **ESLint**：确保代码规范性。
- **Git**：代码版本管理，提交至公开仓库（如 GitHub）。

## 六、开发注意事项

### 6.1 用户体验优化
- **加载性能**：使用懒加载优化图片和视频加载，减少首屏加载时间。
- **交互反馈**：为按钮点击、表单提交等操作添加加载动画和提示。
- **适配性**：确保小程序在不同设备（iOS、Android）和屏幕尺寸下正常显示。
- **无障碍支持**：为图片添加 `alt` 描述，按钮添加 `aria-label`。

### 6.2 代码质量
- **模块化**：将公共逻辑（如请求封装、工具函数）抽取为独立模块。
- **注释**：为关键函数和组件添加注释，说明功能和参数。
- **错误处理**：统一处理接口错误，显示友好提示。
- **代码规范**：遵循 ESLint 规则，保持一致的代码风格。

### 6.3 安全性和权限
- **Token 管理**：将 `token` 存储在 `wx.setStorageSync` 中，设置过期时间，401 错误时跳转登录页。
- **权限控制**：根据用户角色动态显示页面和功能（如审核管理仅对审核员和管理员可见）。
- **数据校验**：在提交游记前校验必填字段，防止无效请求。

### 6.4 项目提交
- **代码仓库**：提交至公开 Git 仓库（如 GitHub），包含清晰的 README 说明项目启动方式。
- **文档**：提供项目说明文档，描述功能实现和技术选型。
- **测试**：在提交前测试所有功能，确保无明显 Bug。

## 七、评分标准实现

根据项目文档的评分标准（页面 9），以下为实现重点：
- **用户体验（10 分）**：
  - 优化 UI 布局，参考项目提供的卡片式设计。
  - 提供流畅的交互体验，如搜索防抖、图片预览、视频播放。
  - 确保小程序加载速度快，首屏渲染时间短。
- **代码质量（10 分）**：
  - 遵循模块化开发，抽取公共组件和逻辑。
  - 使用 ESLint 规范代码，添加必要注释。
  - 确保代码可维护性和可扩展性。

## 八、附录

### 8.1 页面流程图
```
登录/注册 -> 首页 -> 游记详情
        -> 我的游记 -> 新增/编辑游记
        -> 审核管理 -> 审核操作
        -> 个人中心 -> 更新资料/退出登录
```

### 8.2 接口清单
| 接口路径 | 方法 | 功能 | 角色 |
|----------|------|------|------|
| /api/users/register | POST | 用户注册 | 游客 |
| /api/users/login | POST | 用户登录 | 游客 |
| /api/users/profile | GET | 获取个人资料 | 用户 |
| /api/users/avatar | PUT | 更新头像 | 用户 |
| /api/users/nickname | PUT | 更新昵称 | 用户 |
| /api/diaries | GET | 获取已批准游记列表 | 所有 |
| /api/diaries | POST | 创建游记 | 用户 |
| /api/diaries/{id} | GET | 获取游记详情 | 所有 |
| /api/diaries/{id} | PUT | 更新游记 | 用户 |
| /api/diaries/{id} | DELETE | 删除游记 | 用户 |
| /api/diaries/user/me | GET | 获取我的游记 | 用户 |
| /api/admin/diaries/pending | GET | 获取待审核游记 | 审核员/管理员 |
| /api/admin/diaries/{id}/approve | PUT | 审核通过 | 审核员/管理员 |
| /api/admin/diaries/{id}/reject | PUT | 拒绝游记 | 审核员/管理员 |
| /api/admin/diaries/{id} | DELETE | 删除游记 | 管理员 |
| /api/admin/reviewers | GET | 获取审核员列表 | 管理员 |
| /api/admin/reviewers | POST | 添加审核员 | 管理员 |
| /api/admin/reviewers | DELETE | 移除审核员 | 管理员 |

### 8.3 技术栈总结
- 框架：微信小程序原生开发
- UI 组件：Vant Weapp
- 样式：WXSS + Tailwind CSS（可选）
- 状态管理：globalData
- 网络请求：wx.request / wx.uploadFile
- 代码管理：Git

---

本设计文档基于项目要求和 OpenAPI 文档，提供了微信小程序端的详细设计方案，涵盖功能、页面、接口和技术实现，旨在指导开发过程并满足评分标准。